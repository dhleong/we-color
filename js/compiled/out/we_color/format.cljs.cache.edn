;; Analyzed by ClojureScript 1.8.51
{:use-macros nil, :excludes #{}, :name we-color.format, :imports nil, :requires {gstring goog.string, goog.string goog.string, goog.string.format goog.string.format}, :uses nil, :defs {->hex {:protocol-inline nil, :meta {:file "/Users/dhleong/git/we-color/src/cljs/we_color/format.cljs", :line 7, :column 7, :end-line 7, :end-column 12, :arglists (quote ([n]))}, :name we-color.format/->hex, :variadic false, :file "/Users/dhleong/git/we-color/src/cljs/we_color/format.cljs", :end-column 12, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :end-line 7, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n]))}, ->perc {:protocol-inline nil, :meta {:file "/Users/dhleong/git/we-color/src/cljs/we_color/format.cljs", :line 16, :column 7, :end-line 16, :end-column 13, :arglists (quote ([n]))}, :name we-color.format/->perc, :variadic false, :file "/Users/dhleong/git/we-color/src/cljs/we_color/format.cljs", :end-column 13, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 16, :end-line 16, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n]))}, ->ios {:protocol-inline nil, :meta {:file "/Users/dhleong/git/we-color/src/cljs/we_color/format.cljs", :line 30, :column 7, :end-line 30, :end-column 12, :arglists (quote ([color])), :doc "Given a parsed color, format it in iOS style"}, :name we-color.format/->ios, :variadic false, :file "/Users/dhleong/git/we-color/src/cljs/we_color/format.cljs", :end-column 12, :method-params ([color]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 30, :end-line 30, :max-fixed-arity 1, :fn-var true, :arglists (quote ([color])), :doc "Given a parsed color, format it in iOS style"}, ->android {:protocol-inline nil, :meta {:file "/Users/dhleong/git/we-color/src/cljs/we_color/format.cljs", :line 40, :column 7, :end-line 40, :end-column 16, :arglists (quote ([color]))}, :name we-color.format/->android, :variadic false, :file "/Users/dhleong/git/we-color/src/cljs/we_color/format.cljs", :end-column 16, :method-params ([color]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 40, :end-line 40, :max-fixed-arity 1, :fn-var true, :arglists (quote ([color]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:else :green :red :blue :alpha}, :order [:else :red :green :blue :alpha]}, :doc "Color formatters"}