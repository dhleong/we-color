;; Analyzed by ClojureScript 1.8.51
{:use-macros nil, :excludes #{}, :name we-color.format, :imports nil, :requires {goog.string goog.string, goog.string.format goog.string.format}, :uses {format goog.string}, :defs {hex-format {:protocol-inline nil, :meta {:file "/Users/dhleong/git/we-color/src/clj/we_color/format.cljc", :line 11, :column 8, :end-line 11, :end-column 18, :private true, :arglists (quote ([n]))}, :private true, :name we-color.format/hex-format, :variadic false, :file "src/clj/we_color/format.cljc", :end-column 18, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 11, :end-line 11, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n]))}, ->hex {:protocol-inline nil, :meta {:file "/Users/dhleong/git/we-color/src/clj/we_color/format.cljc", :line 19, :column 7, :end-line 19, :end-column 12, :arglists (quote ([n]))}, :name we-color.format/->hex, :variadic false, :file "src/clj/we_color/format.cljc", :end-column 12, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 19, :end-line 19, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n]))}, ->perc {:protocol-inline nil, :meta {:file "/Users/dhleong/git/we-color/src/clj/we_color/format.cljc", :line 30, :column 7, :end-line 30, :end-column 13, :arglists (quote ([n]))}, :name we-color.format/->perc, :variadic false, :file "src/clj/we_color/format.cljc", :end-column 13, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 30, :end-line 30, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n]))}, ->ios {:protocol-inline nil, :meta {:file "/Users/dhleong/git/we-color/src/clj/we_color/format.cljc", :line 46, :column 7, :end-line 46, :end-column 12, :arglists (quote ([color & [fmt]])), :doc "Given a parsed color, format it in iOS style", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(color [fmt])], :arglists ([color & [fmt]]), :arglists-meta (nil)}}, :name we-color.format/->ios, :variadic true, :file "src/clj/we_color/format.cljc", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(color [fmt])], :arglists ([color & [fmt]]), :arglists-meta (nil)}, :method-params [(color [fmt])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 46, :end-line 46, :max-fixed-arity 1, :fn-var true, :arglists ([color & [fmt]]), :doc "Given a parsed color, format it in iOS style"}, ->android {:protocol-inline nil, :meta {:file "/Users/dhleong/git/we-color/src/clj/we_color/format.cljc", :line 64, :column 7, :end-line 64, :end-column 16, :arglists (quote ([color & [fmt]])), :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(color [fmt])], :arglists ([color & [fmt]]), :arglists-meta (nil)}}, :name we-color.format/->android, :variadic true, :file "src/clj/we_color/format.cljc", :end-column 16, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(color [fmt])], :arglists ([color & [fmt]]), :arglists-meta (nil)}, :method-params [(color [fmt])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 64, :end-line 64, :max-fixed-arity 1, :fn-var true, :arglists ([color & [fmt]])}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:else :green :red :blue :alpha}, :order [:else :red :green :blue :alpha]}, :doc "Color formatting"}